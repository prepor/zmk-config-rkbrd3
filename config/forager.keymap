/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors/num_word.dtsi> // Requires auto-layer module.

#define ZMK_POINTING_DEFAULT_SCRL_VAL 20  // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 33 34 35 30 31 32>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <4 3 2 1 0 10 14 13 11 20 21 22 12 23 24 30 31 32 33 34 35>;
            hold-trigger-on-release;
        };

        mphcomma: mphcomma {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHCOMMA";
            bindings = <&kp DOT>, <&kp COMMA>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mphdot: mphdot {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHDOT";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        mphtick: mphtick {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHTICK";
            bindings = <&kp DOUBLE_QUOTES>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr_tick: hmr_tick {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_TICK";
            bindings = <&kp>, <&mphtick>;

            #binding-cells = <2>;
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35>;
        };

        mphlpar: mphlpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHLPAR";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr_lpar: hmr_lpar {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LPAR";
            bindings = <&kp>, <&mphlpar>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <33 34 35 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        num_smart: num_smart {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_SMART";
            bindings = <&mo>, <&num_dance>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };

        num_dance: num_dance {
            compatible = "zmk,behavior-tap-dance";
            label = "NUM_DANCE";
            #binding-cells = <0>;
            bindings = <&num_word 3>, <&sl 3>;

            tapping-term-ms = <200>;
        };

        shift_magic: shift_magic {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MAGIC";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            quick-tap-ms = <175>;
        };

        mphrpar: mphrpar {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHRPAR";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hmr_rpar: hmr_rpar {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RPAR";
            bindings = <&kp>, <&mphrpar>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <33 34 35 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32>;
            hold-trigger-on-release;
        };

        mphqstn: mphqstn {
            compatible = "zmk,behavior-mod-morph";
            label = "MPHQSTN";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0 3>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
        };

        tab {
            bindings = <&hml LS(LALT) TAB>;
            key-positions = <11 12>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 1 3>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 23>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3 1>;
        };

        copy {
            bindings = <&kp LC(INS)>;
            key-positions = <21 22>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3 1>;
        };

        paste {
            bindings = <&kp LS(INS)>;
            key-positions = <22 23>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3 1>;
        };

        rpar {
            bindings = <&hmr_rpar RS(RALT) 0>;
            key-positions = <17 18>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        lpar {
            bindings = <&hmr_lpar RS(RCTRL) 0>;
            key-positions = <16 17>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <6 7>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        lbkt {
            bindings = <&kp LBKT>;
            key-positions = <27 26>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        rbkt {
            bindings = <&kp RBKT>;
            key-positions = <27 28>;
            timeout-ms = <30>;
            require-prior-idle-ms = <150>;
            layers = <0 3>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <5 15>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <7 17>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        amps {
            bindings = <&kp AMPS>;
            key-positions = <8 18>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        under {
            bindings = <&kp UNDER>;
            key-positions = <15 25>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <26 16>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        fslh {
            bindings = <&kp FSLH>;
            key-positions = <17 27>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <28 18>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <11 1>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <12 2>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        dllr {
            bindings = <&kp DLLR>;
            key-positions = <3 13>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <4 14>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <21 11>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        bslh {
            bindings = <&kp BSLH>;
            key-positions = <22 12>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <13 23>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <24 14>;
            timeout-ms = <35>;
            require-prior-idle-ms = <50>;
            layers = <0 3 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
          display-name = "BASE";
            // -----------------------------------------------------------------------------------------
            // |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |
            // |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |
            // |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &kp Q        &kp W        &kp E         &kp R         &kp T        &kp Y           &kp U           &kp I          &kp O             &kp P
  &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G        &kp H           &hmr RCTRL J    &hmr RSHIFT K  &hmr RIGHT_ALT L  &hmr_tick RGUI 0
  &kp Z        &kp X        &kp C         &kp V         &kp B        &kp N           &kp M           &mphcomma      &mphdot           &mphqstn
                            &trans        &lt 1 SPACE   &lt 2 ESC    &num_smart 3 0  &mt LSHIFT RET  &trans
            >;
        };

        nav {
          display-name = "NAV";
            bindings = <
  &trans    &kp HOME  &kp END     &trans     &msc SCRL_UP      &kp PG_UP  &kp BSPC      &kp UP       &kp DEL    &trans
  &sk LGUI  &sk LALT  &sk LSHIFT  &sk LCTRL  &msc SCRL_DOWN    &kp PG_DN  &kp LEFT      &kp DOWN     &kp RIGHT  &kp RET
  &trans    &trans    &trans      &trans     &trans            &kp INS    &kp TAB       &kp RS(TAB)  &trans     &trans
                      &trans      &trans     &trans            &trans     &kp K_CANCEL  &trans
            >;
        };

        fn {
          display-name = "FN";
            bindings = <
  &kp F12        &kp F7        &kp F8          &kp F9         &kp C_VOL_UP    &kp LG(PG_UP)         &kp C_PREV           &kp LG(UP)            &kp C_NEXT                &trans
  &hml LGUI F11  &hml LALT F4  &hml LSHIFT F5  &hml LCTRL F6  &kp C_VOL_DN    &hmr RCTRL LG(PG_DN)  &hmr RCTRL LG(LEFT)  &hmr RSHIFT LG(DOWN)  &hmr RIGHT_ALT LG(RIGHT)  &trans
  &kp F10        &kp F1        &kp F2          &kp F3         &trans          &trans                &trans               &trans                &trans                    &trans
                               &trans          &trans         &trans          &kp C_MUTE            &kp C_PP             &trans
            >;
        };

        num {
          display-name = "NUM";
            bindings = <
  &trans        &kp N7        &kp N8          &kp N9         &trans    &trans  &trans  &trans  &trans  &trans
  &hml LGUI N0  &hml LALT N4  &hml LSHIFT N5  &hml LCTRL N6  &trans    &trans  &trans  &trans  &trans  &trans
  &trans        &kp N1        &kp N2          &kp N3         &trans    &trans  &trans  &trans  &trans  &trans
                              &trans          &trans         &trans    &trans  &trans  &trans
            >;
        };

        sys {
          display-name = "SYS";
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR     &trans       &trans  &trans  &trans  &trans
  &trans        &trans        &trans        &trans        &bootloader    &bootloader  &trans  &trans  &trans  &trans
  &trans        &trans        &trans        &trans        &trans         &trans       &trans  &trans  &trans  &trans
                              &trans        &trans        &trans         &trans       &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        sys {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};
